#include <bits/stdc++.h>
using namespace std;
#define ll long long
const double INF = 1e9+7;

struct Transaction{
    double ask;
    double bid;  
    double base_price;
    double qty;  
    double numberOfOrders;
};


void dfs(unordered_map<string, vector<pair<string, double>>> &graph, unordered_set<string> &visited, string src, string dest, double curr, double &res){
    if(src == dest)
        res = max(res, curr);
        
   visited.insert(src);
   for(auto edge : graph[src]){
       if(!visited.count(edge.first)){
           visited.insert(edge.first);
           curr *= edge.second;
           dfs(graph, visited, edge.first, dest, curr, res);
       }
   }
}

vector<string> printPath(unordered_map<string, string> &path, string dest){
    vector<string> res;
    string curr = dest;
    while(curr != ""){
        res.push_back(curr);
        curr = path[curr];
    }
    reverse(res.begin(), res.end());
    return res;
}

unordered_map<string, double> spfa(unordered_map<string, vector<pair<string, double>>> &graph, string src, string dest){
    // both src and dest nodes should be present
    assert(graph.count(src) > 0);
    assert(graph.count(dest) > 0);
    
    
    unordered_map<string, double> dist;
    queue<string> Q;
    unordered_set<string> inQueue;
    unordered_map<string, string> path;
    
    path[src] = "";
    Q.push(src);
    for(auto p : graph)
        dist[p.first] = INF;
    
    dist[src] = 0;
    inQueue.insert(src);
        
    while(!Q.empty()){
        string node = Q.front();
        Q.pop();
        inQueue.erase(node);
        for(auto edge : graph[node]){
            if(dist[node] != INF and dist[edge.first] > dist[node] + edge.second){
                dist[edge.first]  = dist[node] + edge.second;
                path[edge.first] = node; // node -> edge.first
                if(!inQueue.count(edge.first)){
                    inQueue.insert(edge.first);
                    Q.push(edge.first);
                }
            }
        }
    }
    
    printPath(path, dest);
    return dist;
}

double getSlippage(vector<string> &path, unordered_map<string, unordered_map<string, vector<vector<Transaction>>>>  &orders, string src, string dest, double baseQuantity, unordered_map<string, double> & dist){
    double initQty = baseQuantity;
    double res = 1;
    int N = (int)path.size();
    for(int i=0; i<N-1; i++){
        // i to i+1
        double sm  = 0;
        for(auto t : orders[path[i]][path[i+1]][0]){
            if(t.qty + sm > initQty)break;
            sm += t.qty;
        }
        // find all pair shortest path according to the negated logarithm based approach where dist is unordered_map<string, unordered_map<string, double>> exchangeValues;
        // res *= sm * dist[path[i]][path[i+1]];
    }
    return res;
}

int main() {
    try{
        unordered_map<string, vector<pair<string, double>>> graph;
        
        // 2 units -> 0th index ask list and 1st for bids list
        unordered_map<string, unordered_map<string, vector<vector<Transaction>>>>  ordersGraph;
        int E;
        cin>>E;
        string src, dest;
        double a, b, baseUnits;
        for(int i=0; i<E; i++){
            cin >> src >> dest >> a >> b;
            graph[src].push_back({dest, -log2(b)});
            graph[dest].push_back({src, -log2(1 / a)});
        }
        
        cin >> src >> dest >> baseUnits;
        auto dist = spfa(graph, src, dest);
        double mxExchange = dist[dest] == INF ? 0 : dist[dest];
    
        unordered_set<string> St;
        double res = 0;
        dfs(graph, St, src, dest, 1, res);
        // cout << baseUnits * res << endl;
        cout <<  pow(2, -mxExchange)  * baseUnits << endl;
            
    } catch(exception &e){
        cerr << e.what() << endl;
    }
    return 0;
}

/*
"A->B" :
{ask : X, bid : Y}

A->B = Y
B -> A = X

A represents Base Currency
B represents Quote Currency

A sell -> bid amount of Quote currency
Buy A -> need to pay ask amount of Quote currency

Edge weights: 
A -> B : Y (bid)
B -> A : 1 / ask

Source currency -> Destination currency

Directed graph

W1 * W2 * ... WN >  1 => 1

log(W1 * W2)  > 0
-log(w1) - log(w2) + ... < 0


Finding shortest path src to destination
*/


/*
{current_mkt_price, qty, number_of_orders}
Bids is selling
Ask is buying
BTC-USD

{"bids":[["37901.08","0.03",1],["37900.8","0.09134052",1],["37898.99","0.1797",1],["37898.26","0.65",1],["37895.84","0.03534406",1],["37895.83","0.0509985",1],["37895.3","0.0149659",1],["37890.01","0.09610596",1],["37888.59","0.59989134",1],["37887.56","0.13220072",1],["37881.97","0.045",1],["37881.96","0.73",2],["37881.94","0.68935862",1],["37881.92","0.6598053",1],["37880.03","0.40027831",1],["37877.41","0.13194059",1],["37876","5",1],["37872.88","0.29416795",1],["37872.87","0.1",1],["37865.45","0.078",1],["37862.49","0.18723956",1],["37862.48","0.06",3],["37862.3","0.15",1],["37861.94","0.0042",1],["37859.95","0.20644099",1],["37859.12","0.025",1],["37858.5","0.41288197",1],["37857.62","0.14849406",1],["37857.3","0.15",1],["37856.49","0.33011491",1],["37855.42","4.02031971",1],["37855.22","0.08267714",1],["37852.09","0.15",1],["37851.43","1.625",1],["37850.01","0.23053319",1],["37850","0.30995887",2],["37849.19","0.1411276",1],["37849.05","0.02642074",1],["37847.72","0.078",1],["37847.08","0.01",1],["37844.88","0.05508363",1],["37844.69","0.14737793",1],["37844.34","0.15",1],["37844.28","0.01",1],["37843.19","0.33070658",1],["37842.41","0.001",1],["37840.31","0.248",1],["37840","5",1],["37839.66","0.74026411",3],["37838.05","0.15",1]],"asks":[["37907.11","0.22",1],["37907.14","0.00363531",1],["37907.67","0.592",1],["37907.73","0.03534406",1],["37908.64","0.0312405",1],["37908.79","0.03119219",1],["37908.86","0.03116787",1],["37909.96","0.06062093",2],["37909.97","0.01560389",1],["37910.23","0.856",1],["37910.27","0.01693239",1],["37910.32","0.00560201",1],["37911","0.11",1],["37911.67","0.04754791",1],["37911.83","0.03192519",2],["37912.78","0.00179032",1],["37914.5","0.01024259",1],["37915.27","0.02483087",1],["37915.6","0.0027",1],["37916.57","0.00557652",3],["37917.9","0.00436664",1],["37919.96","0.077",1],["37921.45","0.004",1],["37921.71","0.15",1],["37922.56","0.09926975",1],["37923.14","0.00304156",1],["37926.71","0.15",1],["37926.98","0.05102746",1],["37927.26","0.00104726",1],["37927.55","0.00436966",1],["37929.76","0.0091",1],["37931.48","0.03",1],["37932.37","0.00179022",1],["37933.8","0.06195448",1],["37934.37","0.00378628",1],["37935","0.00259879",1],["37936.58","0.02635978",1],["37936.59","0.00617363",1],["37936.7","0.00210713",2],["37936.82","0.13194059",1],["37937.18","0.50159391",2],["37937.26","0.40027832",1],["37938.21","0.101",1],["37938.8","0.08263838",1],["37939.21","0.0056453",1],["37939.72","0.05508363",1],["37940.75","0.40337914",1],["37942","0.6760281",1],["37942.01","0.269",1],["37942.08","0.16058035",1]],"sequence":25890812064}

BTC-EUR
{"bids":[["31083.76","0.13181437",1],["31082.34","0.04030135",1],["31081.93","0.01367069",1],["31080.91","0.18",1],["31079.67","0.01367069",1],["31079.6","0.13183155",1],["31075.55","0.05185057",1],["31073.16","0.65883442",1],["31072.95","3.9505",1],["31072.85","0.26371129",1],["31071.71","0.14",1],["31071.7","0.33626068",1],["31070.55","0.20644497",1],["31069.55","0.1394",1],["31068.4","0.5338",1],["31066.6","0.04174725",1],["31064.32","0.38846108",1],["31063.71","0.03396723",1],["31062.55","1.512",1],["31059.07","0.52728256",1],["31055.71","0.01367069",1],["31054.99","0.05",1],["31054.21","0.04921535",1],["31047.61","0.049",1],["31041.8","0.3",1],["31033.29","0.132",1],["31029.33","0.005",1],["31028.91","0.0264837",1],["31028.64","3.60370515",1],["31020","0.24846203",1],["31000","0.09583188",3],["30994.15","0.2643",1],["30988.25","0.33",1],["30987.36","0.00331462",1],["30958.05","0.0070187",1],["30943.96","0.0001",1],["30939.28","0.00321274",1],["30935.97","0.0238",1],["30933.26","0.0485",2],["30933.25","0.058",2],["30933.24","2.37",1],["30890","0.00920515",1],["30887.05","0.32",2],["30869.49","11.22",1],["30860.55","3.31",1],["30851.04","0.00176938",1],["30846.95","0.2",1],["30846.09","0.3",1],["30843.83","0.00027799",1],["30841.14","19.82",1]],"asks":[["31091.26","0.03114189",1],["31093.61","0.04072251",1],["31095.44","0.05018525",1],["31103.32","0.1401",1],["31108.38","0.01367069",1],["31111.51","0.06591578",1],["31112.62","0.1",1],["31113.55","0.303",2],["31113.56","0.22778373",1],["31113.57","0.5338",1],["31115.55","0.13183155",1],["31122.21","0.005",1],["31122.38","1.512",1],["31124.19","0.26365443",1],["31125.73","0.049",1],["31125.74","0.20644671",1],["31126.11","0.05151885",1],["31128.67","0.03930078",1],["31133.69","0.01365387",1],["31134.34","0.35",1],["31135.2","0.52738909",1],["31141.89","0.52725023",1],["31142.33","0.132",1],["31155.83","0.02637581",1],["31168.84","0.0478",1],["31168.85","0.0431",1],["31170.41","1.66",1],["31172.86","0.41400673",1],["31174.95","0.1314",1],["31179.32","0.33",1],["31183.99","7.91",1],["31200.52","0.00107828",1],["31206.12","0.2625",1],["31216.82","0.08316398",1],["31248.99","1.55565673",1],["31249","0.0347",1],["31250","0.18509891",5],["31251","0.0001",1],["31252.06","0.00020458",1],["31253.7","0.0009275",1],["31254.17","0.013",1],["31255","0.001",1],["31255.82","0.01654722",1],["31259","0.01",1],["31260","0.0085",1],["31260.18","3.309",1],["31269.52","0.05505659",1],["31271.07","0.00029388",1],["31278.04","0.00037",1],["31283.22","1",1]],"sequence":11618495301}
*/